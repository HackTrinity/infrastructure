- name: Update all packages
  apt:
    name: '*'
    update_cache: yes
    state: latest
- name: Check if reboot is required
  stat:
    path: /var/run/reboot-required
  register: check_reboot
- name: Reboot if required
  command: reboot
  async: 1
  poll: 0
  when: check_reboot.stat.exists
- name: Wait for node to come back online
  wait_for_connection:
    delay: 10
    timeout: 120
  when: check_reboot.stat.exists
- name: Re-gather facts if rebooted
  setup:
  when: check_reboot.stat.exists

- name: Install utilies
  apt:
    name: '{{ ubuntu_utils }}'
    state: latest

- name: Add all nodes to /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '^.*{{ item }}$'
    line: '{{ hostvars[item].ansible_host }}	{{ item }}'
    state: present
  when: hostvars[item].ansible_host is defined
  loop: "{{ groups['all'] }}"

- name: Create disk image directory
  file:
    path: "{{ docker['volumes']['image'] | dirname }}"
    state: directory
    mode: u=rw,g=r
- name: Create Docker volumes disk image
  command:
    cmd: "truncate -s {{ docker['volumes']['size'] }} {{ docker['volumes']['image'] }}"
    creates: "{{ docker['volumes']['image'] }}"
- name: Format Docker volumes disk image as XFS
  filesystem:
    dev: "{{ docker['volumes']['image'] }}"
    fstype: xfs

- name: Mount and add Docker volumes disk image to /etc/fstab
  mount:
    src: "{{ docker['volumes']['image'] }}"
    path: "{{ docker['volumes']['mountpoint'] }}"
    fstype: xfs
    opts: defaults,pquota
    state: mounted

- name: Add Docker GPG key
  apt_key:
    url: "{{ docker['ubuntu']['gpg'] }}"
    state: present
- name: Add Docker APT repository
  apt_repository:
    repo: "deb [arch=amd64] {{ docker['ubuntu']['repo'] }} {{ ansible_lsb['codename'] }} stable"
    update_cache: yes
    state: present
- name: Install Docker
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    update_cache: no
    state: latest
